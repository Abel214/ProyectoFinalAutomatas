#!/usr/bin/env python3
"""
Script de prueba para verificar el filtrado de comandos de voz
"""

import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.glc.logicaGLC import AnalizadorGramaticaVisual

def test_comando_filtrado():
    """Prueba el filtrado de comandos v√°lidos vs inv√°lidos"""
    print("üß™ PRUEBA DE FILTRADO DE COMANDOS")
    print("=" * 50)
    
    analizador = AnalizadorGramaticaVisual(auto_abrir=False)
    
    # Comandos v√°lidos seg√∫n la gram√°tica
    comandos_validos = [
        "derecha",
        "izquierda", 
        "arriba",
        "abajo",
        "puerta a",
        "puerta b", 
        "puerta c",
        "cambiar",
        "mantener",
        "cerrar",
        "reiniciar",
        "otra vez",
        "nueva partida"
    ]
    
    # Comandos inv√°lidos (que NO est√°n en la gram√°tica)
    comandos_invalidos = [
        "hola mundo",
        "caminar",
        "correr",
        "saltar",
        "puerta d",
        "puerta uno",
        "cambio",
        "quedar",
        "abrir",
        "reinicio",
        "vez otra",
        "partida nueva",
        "comando aleatorio",
        "test",
        "prueba",
        "izquierda por favor",
        "derecha ahora",
        "puerta a por favor"
    ]
    
    print("üìã Probando comandos V√ÅLIDOS:")
    comandos_validos_exitosos = 0
    
    for comando in comandos_validos:
        resultado = analizador.mostrar_analisis(comando)
        es_valido = analizador.es_valido()
        
        if es_valido:
            print(f"  ‚úÖ '{comando}' - V√ÅLIDO (correcto)")
            comandos_validos_exitosos += 1
        else:
            print(f"  ‚ùå '{comando}' - INV√ÅLIDO (error en gram√°tica)")
    
    print(f"\nüìä Resultado comandos v√°lidos: {comandos_validos_exitosos}/{len(comandos_validos)}")
    
    print("\nüìã Probando comandos INV√ÅLIDOS (deber√≠an ser rechazados):")
    comandos_invalidos_rechazados = 0
    
    for comando in comandos_invalidos:
        resultado = analizador.mostrar_analisis(comando)
        es_valido = analizador.es_valido()
        
        if not es_valido:
            print(f"  ‚úÖ '{comando}' - RECHAZADO (correcto)")
            comandos_invalidos_rechazados += 1
        else:
            print(f"  ‚ùå '{comando}' - ACEPTADO (error en filtro)")
    
    print(f"\nüìä Resultado comandos inv√°lidos: {comandos_invalidos_rechazados}/{len(comandos_invalidos)} rechazados")
    
    # Estad√≠sticas finales
    print(f"\nüéØ ESTAD√çSTICAS FINALES:")
    print(f"   Precisi√≥n comandos v√°lidos: {(comandos_validos_exitosos/len(comandos_validos))*100:.1f}%")
    print(f"   Precisi√≥n filtrado inv√°lidos: {(comandos_invalidos_rechazados/len(comandos_invalidos))*100:.1f}%")
    
    precision_total = ((comandos_validos_exitosos + comandos_invalidos_rechazados) / 
                      (len(comandos_validos) + len(comandos_invalidos))) * 100
    
    print(f"   Precisi√≥n total del sistema: {precision_total:.1f}%")
    
    if precision_total >= 95:
        print("   üéâ ¬°Excelente! El filtrado funciona correctamente")
    elif precision_total >= 80:
        print("   ‚úÖ Bueno. El filtrado funciona bien")
    else:
        print("   ‚ö†Ô∏è Necesita mejoras en el filtrado")
    
    return precision_total

def test_normalizacion():
    """Prueba la normalizaci√≥n de comandos con errores t√≠picos de reconocimiento de voz"""
    print("\nüîß PRUEBA DE NORMALIZACI√ìN DE COMANDOS")
    print("=" * 50)
    
    analizador = AnalizadorGramaticaVisual(auto_abrir=False)
    
    # Comandos con errores t√≠picos que deber√≠an normalizarse
    comandos_con_errores = [
        ("derecha.", "derecha"),
        ("ezquierda", "izquierda"),
        ("arriba.", "arriba"),
        ("puerto a", "puerta a"),
        ("puerto b", "puerta b"),
        ("cambiar.", "cambiar"),
        ("mantener.", "mantener"),
        ("reiniciar.", "reiniciar"),
        ("nueva.partida", "nueva partida"),
        ("otra.vez", "otra vez")
    ]
    
    print("üîç Probando normalizaci√≥n de comandos:")
    normalizaciones_exitosas = 0
    
    for comando_erroneo, comando_correcto in comandos_con_errores:
        # Simular proceso de normalizaci√≥n (esto se har√≠a en JavaScript)
        print(f"  üìù '{comando_erroneo}' ‚Üí '{comando_correcto}'")
        
        # Probar que el comando correcto es v√°lido
        resultado = analizador.mostrar_analisis(comando_correcto)
        if analizador.es_valido():
            print(f"     ‚úÖ Comando normalizado es v√°lido")
            normalizaciones_exitosas += 1
        else:
            print(f"     ‚ùå Comando normalizado es inv√°lido")
    
    print(f"\nüìä Normalizaciones exitosas: {normalizaciones_exitosas}/{len(comandos_con_errores)}")
    precision_normalizacion = (normalizaciones_exitosas / len(comandos_con_errores)) * 100
    print(f"üìä Precisi√≥n de normalizaci√≥n: {precision_normalizacion:.1f}%")
    
    return precision_normalizacion

def mostrar_comandos_permitidos():
    """Muestra la lista completa de comandos permitidos"""
    print("\nüìù COMANDOS PERMITIDOS POR LA GRAM√ÅTICA")
    print("=" * 50)
    
    comandos_por_categoria = {
        "üö∂ Movimiento": ["izquierda", "derecha", "arriba", "abajo"],
        "üö™ Puertas": ["puerta a", "puerta b", "puerta c"],
        "üéØ Acciones": ["cambiar", "mantener"],
        "üéÆ Control": ["cerrar", "reiniciar", "otra vez"],
        "üÜï Juego": ["nueva partida"]
    }
    
    total_comandos = 0
    for categoria, comandos in comandos_por_categoria.items():
        print(f"\n{categoria}:")
        for comando in comandos:
            print(f"  ‚Ä¢ \"{comando}\"")
            total_comandos += 1
    
    print(f"\nüìä Total de comandos v√°lidos: {total_comandos}")
    print("\n‚ö†Ô∏è IMPORTANTE: Solo estos comandos ser√°n procesados por el sistema")
    print("   Cualquier otro comando ser√° rechazado autom√°ticamente")

def main():
    """Ejecuta todas las pruebas de filtrado"""
    print("üöÄ INICIANDO PRUEBAS DE FILTRADO DE COMANDOS DE VOZ")
    print("=" * 60)
    
    try:
        # Mostrar comandos permitidos
        mostrar_comandos_permitidos()
        
        # Probar filtrado
        precision_filtrado = test_comando_filtrado()
        
        # Probar normalizaci√≥n
        precision_normalizacion = test_normalizacion()
        
        print("\n" + "=" * 60)
        print("üèÅ RESUMEN FINAL DE PRUEBAS")
        print("=" * 60)
        print(f"‚úÖ Precisi√≥n del filtrado: {precision_filtrado:.1f}%")
        print(f"üîß Precisi√≥n de normalizaci√≥n: {precision_normalizacion:.1f}%")
        
        if precision_filtrado >= 95 and precision_normalizacion >= 95:
            print("\nüéâ ¬°SISTEMA DE FILTRADO PERFECTO!")
            print("   - El reconocimiento de voz est√° limitado a comandos v√°lidos")
            print("   - La normalizaci√≥n corrige errores t√≠picos")
            print("   - Solo comandos de la gram√°tica ser√°n procesados")
        else:
            print("\n‚ö†Ô∏è El sistema necesita ajustes")
        
        print("\nüìã Para usar el sistema:")
        print("   1. Ejecutar: python app.py")
        print("   2. Ir a: http://127.0.0.1:5000/laberinto")
        print("   3. Usar SOLO comandos de la gram√°tica")
        print("   4. Observar que comandos inv√°lidos son rechazados")
        
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
